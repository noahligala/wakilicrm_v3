import React, { useEffect, useState } from "react";
import { Grid, TextField, Box } from "@mui/material";
import Button from "@mui/material/Button/Button";
import { useParams } from 'react-router-dom';
import axios from 'axios';
import Menu from "@mui/icons-material/Menu";
import MenuItem from "@mui/material/MenuItem";
import { ArrowDropDown as ArrowDropDownIcon } from "@mui/icons-material";
import AdapterDateFns from '@mui/lab/AdapterDateFns';
import LocalizationProvider from '@mui/lab/LocalizationProvider';
import DatePicker from '@mui/lab/DatePicker';
import TimePicker from '@mui/lab/TimePicker';

export default function EditEvent() {
    const [anchorEl, setAnchorEl] = useState(null);
    const [selectedDate, setSelectedDate] = useState(null); // State to store selected date
    const { eventId } = useParams();
    const [event, setEvent] = useState(null);

    useEffect(() => {
        // Fetch event details based on eventId
        const fetchEvent = async () => {
            try {
                const response = await axios.get(`http://localhost:8000/api/events/${eventId}`);
                setEvent(response.data);
                // Set the default selected date to the event start date
                setSelectedDate(new Date(response.data.startDate));
            } catch (error) {
                console.error('Error fetching event:', error);
            }
        };

        fetchEvent();
    }, [eventId]);

    const handleMenuClick = (event) => {
        setAnchorEl(event.currentTarget);
    };

    const handleCloseMenu = () => {
        setAnchorEl(null);
    };

    const handleMenuItemClick = (action) => {
        // Implement logic for each menu item click
        console.log("Action clicked:", action);
        handleCloseMenu();
    };

    const handleDateChange = (date) => {
        setSelectedDate(date);
    };

    // Handle event update
    const handleUpdateEvent = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.post(`http://localhost:8000/api/events/${eventId}`, { startDate: selectedDate });
            if (response.status === 200) {
                // Handle successful update
                console.log('Event updated successfully');
            } else {
                // Handle update failure
                console.error('Failed to update event');
            }
        } catch (error) {
            console.error('Error updating event:', error);
        }
    };

    return (
        <Grid container>
            {event && (
                <Grid xs spacing={2}>
                    <Grid xs={12} sx={{ display: "flex", flexDirection: "row", mt:4 }}>
                        <Grid xs={6}>
                            {/* TextField with dynamic default value */}
                            <TextField
                                fullWidth
                                label="Add Title"
                                id="standard-size-small"
                                defaultValue={event.title}
                                size="small"
                                variant="standard"
                            />
                        </Grid>
                        <Grid xs={6} sx={{ pl: 5, fontSize: "1rem" }}>
                            <Button
                                variant="contained"
                                disableElevation
                                sx={{ m: 2, textTransform: "none", fontSize: ".8rem", }}
                                onClick={handleUpdateEvent}

                            >
                                Save
                            </Button>
                            <Button
                                color="inherit"
                                variant="contained"
                                disableElevation
                                aria-controls="more-actions-menu"
                                aria-haspopup="true"
                                onClick={handleMenuClick}
                                sx={{ m: 2, textTransform: "none", fontSize: ".8rem" }}
                                endIcon={<ArrowDropDownIcon />}
                            >
                                More Actions
                            </Button>
                            {/*Menu Not Displaying properly */}
                            <Menu
                                id="more-actions-menu"
                                anchorEl={anchorEl}
                                open={Boolean(anchorEl)}
                                onClose={handleCloseMenu}
                                anchorOrigin={{
                                    vertical: 'bottom',
                                    horizontal: 'right',
                                }}
                                transformOrigin={{
                                    vertical: 'top',
                                    horizontal: 'right',
                                }}
                            >
                                <MenuItem onClick={() => handleMenuItemClick("print")}>Print</MenuItem>
                                <MenuItem onClick={() => handleMenuItemClick("delete")}>Delete</MenuItem>
                                <MenuItem onClick={() => handleMenuItemClick("duplicate")}>Duplicate</MenuItem>
                                <MenuItem onClick={() => handleMenuItemClick("publish event")}>Publish Event</MenuItem>
                                <MenuItem onClick={() => handleMenuItemClick("change owner")}>Change Owner</MenuItem>
                            </Menu>
                        </Grid>
                    </Grid>
                    <Grid xs={{ display: "flex", flexGrow: 1, mt: 2 }}>
                    </Grid>
                    <Grid sx={{ display: "flex", flexGrow: 1, mt: 2, flexDirection:'row' }}>
                        <Grid xs={6}>
                            <Box sm={6} sx={{display:'flex', flexDirection:'row'}} >
                                {/* Inputs */}
                                <LocalizationProvider dateAdapter={AdapterDateFns}>
                                    <DatePicker
                                        label="Start Date"
                                        value={selectedDate}
                                        onChange={handleDateChange}
                                        renderInput={(params) => <TextField {...params} />}
                                    />
                                    <TimePicker
                                        label="Start Time"
                                        value={selectedDate}
                                        onChange={handleDateChange}
                                        renderInput={(params) => <TextField {...params} />}
                                    />
                                </LocalizationProvider>
                            </Box>
                        </Grid>
                        <Grid xs={6}>
                            
                        <Box sm={6} >
                                {/* Inputs */}
                            </Box>
                        </Grid>
                    </Grid>
                </Grid>
            )}
        </Grid>
    );
}


There might be a problem with the project dependency tree.
It is likely not a bug in Create React App, but something you need to fix locally.

The react-scripts package provided by Create React App requires a dependency:

  "eslint": "^5.16.0"

Don't try to install it manually: your package manager does it automatically.
However, a different version of eslint was detected higher up in the tree:

  /Users/ligala/Desktop/DEVOPs/Django/wakilicrm/wakilicrm/lawfirm_crm_frontend/node_modules/eslint (version: 8.57.0) 

Manually installing incompatible versions is known to cause hard-to-debug issues.

If you would prefer to ignore this check, add SKIP_PREFLIGHT_CHECK=true to an .env file in your project.
That will permanently disable this message but you might encounter other issues.

To fix the dependency tree, try following the steps below in the exact order:

  1. Delete package-lock.json (not package.json!) and/or yarn.lock in your project folder.
  2. Delete node_modules in your project folder.
  3. Remove "eslint" from dependencies and/or devDependencies in the package.json file in your project folder.
  4. Run npm install or yarn, depending on the package manager you use.

In most cases, this should be enough to fix the problem.
If this has not helped, there are a few other things you can try:

  5. If you used npm, install yarn (http://yarnpkg.com/) and repeat the above steps with it instead.
     This may help because npm has known issues with package hoisting which may get resolved in future versions.

  6. Check if /Users/ligala/Desktop/DEVOPs/Django/wakilicrm/wakilicrm/lawfirm_crm_frontend/node_modules/eslint is outside your project directory.
     For example, you might have accidentally installed something in your home folder.

  7. Try running npm ls eslint in your project folder.
     This will tell you which other package (apart from the expected react-scripts) installed eslint.

If nothing else helps, add SKIP_PREFLIGHT_CHECK=true to an .env file in your project.
That would permanently disable this preflight check in case you want to proceed anyway.

P.S. We know this message is long but please read the steps above :-) We hope you find them helpful!